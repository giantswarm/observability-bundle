clusterID: ""
organization: ""

global:
  podSecurityStandards:
    enforced: false

ciliumNetworkPolicy:
  enabled: false

apps:
  prometheus-operator-crd:
    appName: prometheus-operator-crd
    chartName: prometheus-operator-crd
    catalog: default
    enabled: true
    namespace: kube-system
    # used by renovate
    # repo: giantswarm/prometheus-operator-crd
    version: 6.1.0
    # User values can be provided via a ConfigMap or Secret for each individual app
    userConfig: {}
    # a list of extraConfigs for the App,
    # It can be secret or configmap
    # https://github.com/giantswarm/rfc/tree/main/multi-layer-app-config#example
    extraConfigs: []

  prometheus-operator-app:
    appName: prometheus-operator-app
    chartName: prometheus-operator-app
    catalog: default
    dependsOn: prometheus-operator-crd
    enabled: true
    namespace: kube-system
    skipCRDs: true
    # used by renovate
    # repo: giantswarm/prometheus-operator-app
    version: 6.2.1
    userConfig: {}
    # a list of extraConfigs for the App,
    # It can be secret or configmap
    # https://github.com/giantswarm/rfc/tree/main/multi-layer-app-config#example
    extraConfigs:
      - kind: configMap
        name: "{{ $.Values.clusterID }}-prometheus-operator"
        namespace: "{{ $.Release.Namespace }}"

  prometheus-agent:
    appName: prometheus-agent
    chartName: prometheus-agent
    catalog: default
    dependsOn: prometheus-operator-crd
    enabled: true
    namespace: kube-system
    # used by renovate
    # repo: giantswarm/prometheus-agent-app
    version: 0.6.5
    # User values can be provided via a ConfigMap or Secret for each individual app
    # using the structure shown below.
    userConfig: {}
    # a list of extraConfigs for the App,
    # It can be secret or configmap
    # https://github.com/giantswarm/rfc/tree/main/multi-layer-app-config#example
    extraConfigs:
      - kind: configMap
        name: "{{ $.Values.clusterID }}-prometheus-agent-extraconfig"
        namespace: "{{ $.Release.Namespace }}"
      - kind: secret
        name: "{{ $.Values.clusterID }}-remote-write-secret"
        namespace: "{{ $.Release.Namespace }}"
      - kind: configMap
        name: "{{ $.Values.clusterID }}-remote-write-config"
        namespace: "{{ $.Release.Namespace }}"

  promtail-app:
    appName: promtail-app
    chartName: promtail
    catalog: giantswarm
    enabled: false
    namespace: kube-system
    # used by renovate
    # repo: giantswarm/promtail-app
    version: 1.4.0
    # User values can be provided via a ConfigMap or Secret for each individual app
    userConfig: {}
    # a list of extraConfigs for the App,
    # It can be secret or configmap
    # https://github.com/giantswarm/rfc/tree/main/multi-layer-app-config#example
    extraConfigs:
      - kind: secret
        name: "{{ $.Values.clusterID }}-logging-secret"
        namespace: "{{ $.Release.Namespace }}"
      - kind: configMap
        name: "{{ $.Values.clusterID }}-logging-config"
        namespace: "{{ $.Release.Namespace }}"
      - kind: configMap
        name: "{{ $.Values.clusterID }}-promtail-app-extraconfig"
        namespace: "{{ $.Release.Namespace }}"

  grafana-agent-app:
    appName: grafana-agent-app
    chartName: grafana-agent
    catalog: giantswarm
    enabled: false
    namespace: kube-system
    # used by renovate
    # repo: giantswarm/grafana-agent-app
    version: 0.2.0
    # User values can be provided via a ConfigMap or Secret for each individual app
    userConfig: {}
    # a list of extraConfigs for the App,
    # It can be secret or configmap
    # https://github.com/giantswarm/rfc/tree/main/multi-layer-app-config#example
    extraConfigs:
      - kind: configMap
        name: "{{ $.Values.clusterID }}-grafana-agent-app-extraconfig"
        namespace: "{{ $.Release.Namespace }}"